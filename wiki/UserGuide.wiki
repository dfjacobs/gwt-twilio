#summary User Guide
Read the Twilio Client docs http://www.twilio.com/docs/client/
  * = Steps to using Twilio Client in your GWT app =
    # Add gwt-twilio.jar to your projects classpath
    # Add a link to the Twilio Client javascript file in your html file NB. Do not use https since it causes problems with some browsers.
      <code language="xml"><script type="text/javascript" src="http://static.twilio.com/libs/twiliojs/1.0/twilio.min.js"></script></code>
    # Inherit the Twilio module in your GWT Module File
       <code language="xml"><inherits name='com.xedge.twilio.GWTTwilio'/></code>
    # Start coding...


= Code Snippets =
  * Import classes
<code language="java">     import com.xedge.twilio.client.Connection;
    import com.xedge.twilio.client.ConnectionHandler;
    import com.xedge.twilio.client.Device;
    import com.xedge.twilio.client.DeviceHandler;
    import com.xedge.twilio.client.Error;
    import com.xedge.twilio.client.ErrorHandler;</code>


  * Initialize Device with a capability token http://www.twilio.com/docs/client/capability-tokens
<code language="java">    Device.setup(token);</code>
 
  * Get device ready
<code language="java">    Device.ready(new DeviceHandler() {
       @Override
       public void handle(Device device) {
          //device ready
       }
    });</code>

  * Add device error handler
<code language="java">    Device.error(new ErrorHandler() {
       @Override
       public void handle(Error error) {
          //error has occured
       }
    });</code>

  * Make a call
<code language="java">    Device.connect();</code>

  * Make a call with parameters
<code language="java">    Device.connect();
    Map<String, String> params = new HashMap<String, String>();
    params.put("contact", "08233433533");
    Device.connect(params);</code>

  * Hangup on all connections
<code language="java">    Device.disconnectAll();</code>

  * Listen for calls that are successfully established
<code language="java">    Device.connect(new ConnectionHandler() {
       @Override
       public void handle(Connection connection) {
         //Successfully established call
       }
    });</code>

  * Listen for calls that end
<code language="java">    Device.disconnect(new ConnectionHandler() {
       @Override
       public void handle(Connection connection) {
         //Call has ended
       }
    });</code>

  * Listen for incoming calls
<code language="java">    Device.incoming(new ConnectionHandler() {
       @Override
       public void handle(Connection connection) {
         //access to incoming connection parameters
         String from = connection.getParameters().getFrom());
         //accept a call
         connection.accept();
       }
    });</code>

  * Listen for accepted connections/answered calls
<code language="java">    connection.accept(new ConnectionHandler() {
       @Override
       public void handle(Connection connection) {
          //connection accepted
       }
    });</code>

  * Listen for disconnected connections/hangup calls
<code language="java">    connection.disconnect(new ConnectionHandler() {
       @Override
       public void handle(Connection connection) {
          //connection disconnected
       }
    });</code>

  * Listen for errors on the connections/calls
<code language="java">    connection.error(new ErrorHandler() {
       @Override
       public void handle(Error error) {
          //Connection error
          String errorMessage = error.getMessage();
          String errorCode = error.getCode();
       }
    });</code>

  * Listen for availability state changes for any client currently associated with your Twilio account
<code language="java">    Device.presence(new PresenceHandler() {
       @Override
       public void handle(PresenceEvent presenceEvent) {
          String clientName = presenceEvent.getFrom();
          boolean availability = presenceEvent.isAvailable();
       }
    });</code>